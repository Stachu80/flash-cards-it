{
  "questions": [
    {
      "id": "1",
      "question": "What is the difference between let, const, and var?",
      "answer": "var is function-scoped and can be redeclared and updated. let is block-scoped, can be updated but not redeclared. const is block-scoped and can neither be updated nor redeclared. Both let and const are not hoisted, while var is hoisted.",
      "difficulty": "Basic",
      "category": "Variables"
    },
    {
      "id": "2",
      "question": "Explain closures in JavaScript",
      "answer": "A closure is the combination of a function and the lexical environment within which that function was declared. It allows a function to access variables from its outer scope even after the outer function has returned.",
      "difficulty": "Intermediate",
      "category": "Functions"
    },
    {
      "id": "3",
      "question": "What is the event loop in JavaScript?",
      "answer": "The event loop is a mechanism that allows JavaScript to perform non-blocking operations despite being single-threaded. It continuously checks the call stack and callback queue, executing tasks accordingly.",
      "difficulty": "Advanced",
      "category": "Asynchronous"
    },
    {
      "id": "4",
      "question": "What are Promises and how do they work?",
      "answer": "Promises are objects representing the eventual completion (or failure) of an asynchronous operation. They have three states: pending, fulfilled, or rejected.",
      "difficulty": "Intermediate",
      "category": "Asynchronous"
    },
    {
      "id": "5",
      "question": "What is prototypal inheritance?",
      "answer": "Prototypal inheritance is a method by which an object can inherit properties and methods from another object through the prototype chain.",
      "difficulty": "Advanced",
      "category": "OOP"
    },
    {
      "id": "6",
      "question": "What is the difference between == and === operators?",
      "answer": "== performs type coercion before comparison, while === compares both value and type without coercion.",
      "difficulty": "Basic",
      "category": "Operators"
    },
    {
      "id": "7",
      "question": "What is hoisting?",
      "answer": "Hoisting is JavaScript's default behavior of moving declarations to the top of their scope before code execution.",
      "difficulty": "Intermediate",
      "category": "Fundamentals"
    },
    {
      "id": "8",
      "question": "What is the difference between null and undefined?",
      "answer": "undefined means a variable has been declared but not assigned a value, while null is an explicit assignment to represent no value.",
      "difficulty": "Basic",
      "category": "Fundamentals"
    },
    {
      "id": "9",
      "question": "What is the purpose of 'use strict'?",
      "answer": "'use strict' enables strict mode in JavaScript, which enforces stricter parsing and error handling, prevents the use of certain syntax, and makes debugging easier.",
      "difficulty": "Intermediate",
      "category": "Fundamentals"
    },
    {
      "id": "10",
      "question": "What is the difference between map and forEach?",
      "answer": "map creates a new array with the results of calling a function for every array element, while forEach just executes a function for each element without creating a new array.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "11",
      "question": "What is async/await and how does it work?",
      "answer": "async/await is a syntax for handling Promises more cleanly. async functions return a Promise, and await pauses execution until a Promise resolves.",
      "difficulty": "Advanced",
      "category": "Asynchronous"
    },
    {
      "id": "12",
      "question": "What is the difference between call, apply, and bind?",
      "answer": "call and apply immediately invoke a function with a specified this context, while bind returns a new function with the specified this context. call takes arguments separately, apply takes them as an array.",
      "difficulty": "Advanced",
      "category": "Functions"
    },
    {
      "id": "13",
      "question": "What is event bubbling?",
      "answer": "Event bubbling is the process where an event triggers on the deepest target element, then bubbles up through its parent elements in the DOM tree.",
      "difficulty": "Intermediate",
      "category": "DOM"
    },
    {
      "id": "14",
      "question": "What is event delegation?",
      "answer": "Event delegation is a technique of attaching event listeners to parent elements instead of each child element, utilizing event bubbling.",
      "difficulty": "Intermediate",
      "category": "DOM"
    },
    {
      "id": "15",
      "question": "What is the difference between localStorage and sessionStorage?",
      "answer": "localStorage persists data until explicitly cleared, while sessionStorage only persists data for the duration of the browser session.",
      "difficulty": "Basic",
      "category": "Web Storage"
    },
    {
      "id": "16",
      "question": "What is a callback function?",
      "answer": "A callback function is a function passed as an argument to another function, to be executed after the first function completes.",
      "difficulty": "Basic",
      "category": "Functions"
    },
    {
      "id": "17",
      "question": "What is the difference between slice and splice?",
      "answer": "slice returns a new array with selected elements, while splice modifies the original array by adding/removing elements.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "18",
      "question": "What is destructuring?",
      "answer": "Destructuring is a way to extract values from objects or arrays into distinct variables using a syntax that mirrors the construction of array and object literals.",
      "difficulty": "Intermediate",
      "category": "ES6+"
    },
    {
      "id": "19",
      "question": "What are template literals?",
      "answer": "Template literals are string literals that allow embedded expressions and multiline strings, using backticks (`) instead of quotes.",
      "difficulty": "Basic",
      "category": "ES6+"
    },
    {
      "id": "20",
      "question": "What is the spread operator?",
      "answer": "The spread operator (...) allows an array or object to be expanded into individual elements.",
      "difficulty": "Basic",
      "category": "ES6+"
    },
    {
      "id": "21",
      "question": "What is the rest parameter?",
      "answer": "The rest parameter syntax allows a function to accept an indefinite number of arguments as an array.",
      "difficulty": "Intermediate",
      "category": "ES6+"
    },
    {
      "id": "22",
      "question": "What are arrow functions?",
      "answer": "Arrow functions are a concise way to write function expressions, with implicit returns and lexical this binding.",
      "difficulty": "Basic",
      "category": "ES6+"
    },
    {
      "id": "23",
      "question": "What is the difference between Object.freeze() and Object.seal()?",
      "answer": "Object.freeze() prevents adding, deleting, and modifying properties, while Object.seal() only prevents adding and deleting properties.",
      "difficulty": "Advanced",
      "category": "Objects"
    },
    {
      "id": "24",
      "question": "What is the purpose of Symbol?",
      "answer": "Symbol is a primitive type that creates unique identifiers, often used as property keys to avoid name collisions.",
      "difficulty": "Advanced",
      "category": "ES6+"
    },
    {
      "id": "25",
      "question": "What are WeakMap and WeakSet?",
      "answer": "WeakMap and WeakSet are collections that hold weak references to objects, allowing garbage collection of their keys when they're no longer referenced elsewhere.",
      "difficulty": "Advanced",
      "category": "ES6+"
    },
    {
      "id": "26",
      "question": "What is the difference between for...in and for...of?",
      "answer": "for...in iterates over enumerable property names of an object, while for...of iterates over values of iterable objects like arrays.",
      "difficulty": "Intermediate",
      "category": "Loops"
    },
    {
      "id": "27",
      "question": "What is the purpose of the void operator?",
      "answer": "The void operator evaluates an expression and returns undefined, often used to ensure a function returns undefined.",
      "difficulty": "Advanced",
      "category": "Operators"
    },
    {
      "id": "28",
      "question": "What is memoization?",
      "answer": "Memoization is an optimization technique that stores the results of expensive function calls and returns the cached result when the same inputs occur again.",
      "difficulty": "Advanced",
      "category": "Performance"
    },
    {
      "id": "29",
      "question": "What is the difference between shallow and deep copying?",
      "answer": "Shallow copying creates a new object but keeps references to nested objects, while deep copying creates a completely independent copy of all nested objects.",
      "difficulty": "Intermediate",
      "category": "Objects"
    },
    {
      "id": "30",
      "question": "What is the purpose of the 'new' keyword?",
      "answer": "The 'new' keyword creates an instance of an object type, executing the constructor function and binding 'this' to the new object.",
      "difficulty": "Intermediate",
      "category": "OOP"
    },
    {
      "id": "31",
      "question": "What is the purpose of the 'this' keyword in JavaScript?",
      "answer": "'this' refers to the object it belongs to, and its value is determined by how a function is called.",
      "difficulty": "Intermediate",
      "category": "Objects"
    },
    {
      "id": "32",
      "question": "What is the difference between synchronous and asynchronous code?",
      "answer": "Synchronous code is executed line by line, blocking further execution until the current operation completes. Asynchronous code allows other operations to continue before the current operation completes.",
      "difficulty": "Basic",
      "category": "Asynchronous"
    },
    {
      "id": "33",
      "question": "What is the purpose of the Array.map() method?",
      "answer": "Array.map() creates a new array with the results of calling a provided function on every element in the calling array.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "34",
      "question": "What is the purpose of the Array.filter() method?",
      "answer": "Array.filter() creates a new array with all elements that pass the test implemented by the provided function.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "35",
      "question": "What is the purpose of the Array.reduce() method?",
      "answer": "Array.reduce() executes a reducer function on each element of the array, resulting in a single output value.",
      "difficulty": "Advanced",
      "category": "Arrays"
    },
    {
      "id": "36",
      "question": "What is the purpose of the Array.find() method?",
      "answer": "Array.find() returns the value of the first element in the array that satisfies the provided testing function.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "37",
      "question": "What is the purpose of the Array.includes() method?",
      "answer": "Array.includes() determines whether an array includes a certain value among its entries, returning true or false.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "38",
      "question": "What is the purpose of the Array.some() method?",
      "answer": "Array.some() tests whether at least one element in the array passes the test implemented by the provided function.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "39",
      "question": "What is the purpose of the Array.every() method?",
      "answer": "Array.every() tests whether all elements in the array pass the test implemented by the provided function.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "40",
      "question": "What is the purpose of the Array.concat() method?",
      "answer": "Array.concat() is used to merge two or more arrays, returning a new array.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "41",
      "question": "What is the purpose of the Array.join() method?",
      "answer": "Array.join() joins all elements of an array into a string and returns this string.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "42",
      "question": "What is the purpose of the Array.reverse() method?",
      "answer": "Array.reverse() reverses the order of the elements in an array in place.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "43",
      "question": "What is the purpose of the Array.sort() method?",
      "answer": "Array.sort() sorts the elements of an array in place and returns the sorted array.",
      "difficulty": "Intermediate",
      "category": "Arrays"
    },
    {
      "id": "44",
      "question": "What is the purpose of the Array.push() method?",
      "answer": "Array.push() adds one or more elements to the end of an array and returns the new length of the array.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "45",
      "question": "What is the purpose of the Array.pop() method?",
      "answer": "Array.pop() removes the last element from an array and returns that element.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "46",
      "question": "What is the purpose of the Array.shift() method?",
      "answer": "Array.shift() removes the first element from an array and returns that element.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "47",
      "question": "What is the purpose of the Array.unshift() method?",
      "answer": "Array.unshift() adds one or more elements to the beginning of an array and returns the new length of the array.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "48",
      "question": "What is the purpose of the Array.indexOf() method?",
      "answer": "Array.indexOf() returns the first index at which a given element can be found in the array, or -1 if it is not present.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "49",
      "question": "What is the purpose of the Array.lastIndexOf() method?",
      "answer": "Array.lastIndexOf() returns the last index at which a given element can be found in the array, or -1 if it is not present.",
      "difficulty": "Basic",
      "category": "Arrays"
    },
    {
      "id": "50",
      "question": "What is the purpose of the Array.flat() method?",
      "answer": "Array.flat() creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
      "difficulty": "Advanced",
      "category": "Arrays"
    }
  ]
}
